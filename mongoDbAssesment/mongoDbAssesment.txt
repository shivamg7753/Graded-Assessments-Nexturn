1. Creating the Collections and Insert Data:

db.customers.insertMany([
  { "_id": 1, "name": "Rahul Verma", "email": "rahulverma@example.com", "address": { "street": "123 MG Road", "city": "Mumbai", "zipcode": "400001" }, "phone": "9876543210", "registration_date": ISODate("2023-01-01T12:00:00Z") },
  { "_id": 2, "name": "Priya Singh", "email": "priyasingh@example.com", "address": { "street": "456 Brigade Road", "city": "Bangalore", "zipcode": "560001" }, "phone": "8765432109", "registration_date": ISODate("2023-02-01T12:00:00Z") },
  { "_id": 3, "name": "Amit Shah", "email": "amitshah@example.com", "address": { "street": "789 Ring Road", "city": "Delhi", "zipcode": "110001" }, "phone": "7654321098", "registration_date": ISODate("2023-03-01T12:00:00Z") },
  { "_id": 4, "name": "Meera Patel", "email": "meerapatel@example.com", "address": { "street": "101 Marine Drive", "city": "Mumbai", "zipcode": "400002" }, "phone": "6543210987", "registration_date": ISODate("2023-04-01T12:00:00Z") },
  { "_id": 5, "name": "Vikas Choudhary", "email": "vikaschoudhary@example.com", "address": { "street": "202 Electronic City", "city": "Bangalore", "zipcode": "560100" }, "phone": "5432109876", "registration_date": ISODate("2023-05-01T12:00:00Z") }
]);


// Create the orders collection and insert data with numeric customer_id
db.orders.insertMany([
  { "_id": 1, "order_id": "ORD100001", "customer_id": 1, "order_date": ISODate("2023-05-15T14:00:00Z"), "status": "shipped", "items": [ { "product_name": "Laptop", "quantity": 1, "price": 70000 }, { "product_name": "Mouse", "quantity": 2, "price": 500 } ], "total_value": 71000 },
  { "_id": 2, "order_id": "ORD100002", "customer_id": 2, "order_date": ISODate("2023-06-10T10:00:00Z"), "status": "delivered", "items": [ { "product_name": "Tablet", "quantity": 1, "price": 20000 }, { "product_name": "Keyboard", "quantity": 1, "price": 1000 } ], "total_value": 21000 },
  { "_id": 3, "order_id": "ORD100003", "customer_id": 3, "order_date": ISODate("2023-07-20T11:00:00Z"), "status": "processing", "items": [ { "product_name": "Monitor", "quantity": 1, "price": 12000 } ], "total_value": 12000 },
  { "_id": 4, "order_id": "ORD100004", "customer_id": 4, "order_date": ISODate("2023-08-01T09:00:00Z"), "status": "shipped", "items": [ { "product_name": "Headphones", "quantity": 1, "price": 3000 }, { "product_name": "Charger", "quantity": 1, "price": 500 } ], "total_value": 3500 },
  { "_id": 5, "order_id": "ORD100005", "customer_id": 5, "order_date": ISODate("2023-09-05T13:00:00Z"), "status": "delivered", "items": [ { "product_name": "Smartphone", "quantity": 1, "price": 25000 } ], "total_value": 25000 }
]);


2. Finding Orders for a Specific Customer:

const customer = db.customers.findOne({ name: "Rahul Verma" });

db.orders.find({ customer_id: customer._id });

3. Finding the Customer for a Specific Order:


const order = db.orders.findOne({ order_id: "ORD100001" });
db.customers.findOne({ _id: order.customer_id });


4. Updating Order Status:

db.orders.updateOne(
  { order_id: "ORD100001" },
  { $set: { status: "delivered" } }
);


5. Deleting an Order:

db.orders.deleteOne({ order_id: "ORD100001" });



Part 2: Aggregation Pipeline


1. Calculating Total Value of All Orders by Customer:

db.orders.aggregate([
  { $group: { _id: "$customer_id", total_spent: { $sum: "$total_value" } } },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customer_details"
    }
  },
  { $unwind: "$customer_details" },
  { $project: { "customer_details.name": 1, total_spent: 1 } }
]);


2. Grouping Orders by Status:

db.orders.aggregate([
  { $group: { _id: "$status", order_count: { $sum: 1 } } }
]);



3. Listing Customers with Their Recent Orders:

db.orders.aggregate([
  { $sort: { order_date: -1 } },
  { $group: { _id: "$customer_id", latest_order: { $first: "$$ROOT" } } },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customer_details"
    }
  },
  { $unwind: "$customer_details" },
  { $project: { "customer_details.name": 1, "customer_details.email": 1, latest_order: 1 } }
]);




4. Finding the Most Expensive Order by Customer:
db.orders.aggregate([
  { $sort: { total_value: -1 } },
  { $group: { _id: "$customer_id", highest_value_order: { $first: "$$ROOT" } } },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customer_details"
    }
  },
  { $unwind: "$customer_details" },
  { $project: { "customer_details.name": 1, highest_value_order: 1 } }
]);


Part 3: Real-World Scenario with Relationships

1. Finding All Customers Who Placed Orders in the Last Month

const thirtyDaysAgo = new Date();
thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

db.orders.aggregate([
  { $match: { order_date: { $gte: thirtyDaysAgo } } },
  { $sort: { order_date: -1 } },
  { 
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "_id",
      as: "customer_details"
    }
  },
  { $unwind: "$customer_details" },
  { 
    $project: {
      _id: 0,
      "customer_name": "$customer_details.name",
      "email": "$customer_details.email",
      "latest_order_date": "$order_date"
    }
  }
]);




2. Finding All Products Ordered by a Specific Customer

const customer = db.customers.findOne({ name: "Rahul Sharma" });

if (customer) {
  db.orders.aggregate([
    { $match: { customer_id: customer._id } },
    { $unwind: "$items" },
    {
      $group: {
        _id: "$items.product_name",
        total_quantity: { $sum: "$items.quantity" }
      }
    },
    {
      $project: {
        _id: 0,
        product_name: "$_id",
        total_quantity: 1
      }
    }
  ]);
} else {
  print("Customer not found");
}



3. Finding the Top 3 Customers with the Most Expensive Total Orders

db.orders.aggregate([
  {
    $group: {
      _id: "$customer_id",
      total_spent: { $sum: "$total_value" }
    }
  },
  {
    $sort: { total_spent: -1 }
  },
  {
    $limit: 3
  },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customer_info"
    }
  },
  {
    $unwind: "$customer_info"
  },
  {
    $project: {
      _id: 0,
      customer_name: "$customer_info.name",
      email: "$customer_info.email",
      total_spent: {
        $let: {
          vars: {
            formatted: {
              $concat: [
                { $toString: "$total_spent" },
                "" 
              ]
            }
          },
          in: "$$formatted"
        }
      }
    }
  }
]);






4. Adding a New Order for an Existing Customer
const RahulVerma = db.customers.findOne({ name: "Rahul Verma" });

db.orders.insertOne({
  order_id: "ORD123461",  
  customer_id: RahulVerma._id,
  order_date: new Date(),
  status: "processing",
  items: [ 
    { product_name: "Smartphone", quantity: 1, price: 800 },
    { product_name: "Headphones", quantity: 1, price: 100 }
  ],
  total_value: 900
});
